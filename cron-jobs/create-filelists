#!/bin/bash

reposdir="/srv/ftp"
targetdir="/srv/ftp"
repos="core extra testing community community-testing"
lock="/tmp/create-filelists.lock"

. "$(dirname $0)/../db-functions"
. "$(dirname $0)/../config"

if [ -f "$lock" ]; then
    echo "Error: create-filelists already in progress."
    exit 1
fi

touch "$lock" || exit 1
# location where the package DB is extracted so we know what to include
DBDIR="$(mktemp -d /tmp/create-filelists.dbdir.XXXXXX)" || exit 1
# location where the old files DB is extracted to save us some work
CACHEDIR="$(mktemp -d /tmp/create-filelists.cachedir.XXXXXX)" || exit 1
# location where the new files DB is built up and eventually zipped
TMPDIR="$(mktemp -d /tmp/create-filelists.tmpdir.XXXXXX)" || exit 1

#adjust the nice level to run at a lower priority
/usr/bin/renice +10 -p $$ > /dev/null

case "${DBEXT}" in
    *.gz)  TAR_OPT="z" ;;
    *.bz2) TAR_OPT="j" ;;
    *.xz)  TAR_OPT="J" ;;
    *) echo "Unknown compression type for DBEXT=${DBEXT}" && exit 1 ;;
esac

FILESEXT="${DBEXT//db/files}"

for repo in $repos; do
    REPO_DB_FILE="${repo}$DBEXT"
    FILES_DB_FILE="${repo}$FILESEXT"
    for arch in ${ARCHES[@]}; do
#       echo "Running for architecture $arch, repo $repo"
        cd "$reposdir"

        repodir="${repo}/os/${arch}"
        cached="no"

        # extract package db archive
        if [ -f "${targetdir}/${repodir}/${REPO_DB_FILE}" ]; then
            mkdir -p "${DBDIR}/${repodir}"
#           echo "extracting $REPO_DB_FILE"
            bsdtar -xf "${targetdir}/${repodir}/${REPO_DB_FILE}" -C "${DBDIR}/${repodir}"
        else
            echo "Fail! Does the repo $repo with arch $arch even exist?"
            continue
        fi

        # extract old file archive
        if [ -f "${targetdir}/${repodir}/${FILES_DB_FILE}" ]; then
            mkdir -p "${CACHEDIR}/${repodir}"
#           echo "extracting $FILES_DB_FILE"
            bsdtar -xf "${targetdir}/${repodir}/${FILES_DB_FILE}" -C "${CACHEDIR}/${repodir}"
            cached="yes"
        fi

        # create file lists
        for pkg in $(ls ${DBDIR}/${repodir}); do
            tmppkgdir="${TMPDIR}/${repodir}/${pkg}"
            mkdir -p "$tmppkgdir"
            if [ -f "${CACHEDIR}/${repodir}/${pkg}/files" ]; then
#               echo "cache: $pkg"
                mv "${CACHEDIR}/${repodir}/${pkg}/files" "${tmppkgdir}/files"
            else
#               echo "not cache: $repo/$arch: $pkg"
                filename=$(grep -A1 '^%FILENAME%$' "${DBDIR}/${repodir}/${pkg}/desc" | tail -n1)
                echo '%FILES%' > "${tmppkgdir}/files"
                bsdtar --exclude=.* -tf "$repodir/$filename" >> "${tmppkgdir}/files"
                cached="no"
            fi
        done

        # create new file archive
        if [ "$cached" == "no" ]; then
            # at least one package has changed, so let's rebuild the archive
#           echo "creating ${FILES_DB_FILE}/${arch}"
            pkgdir="${targetdir}/${repodir}"
            mkdir -p "$pkgdir"
            cd "${TMPDIR}/${repodir}"
            [ -f "${pkgdir}/${FILES_DB_FILE}.old" ] && rm "${pkgdir}/${FILES_DB_FILE}.old"
            [ -f "${pkgdir}/${FILES_DB_FILE}" ] && mv "${pkgdir}/${FILES_DB_FILE}" "${pkgdir}/${FILES_DB_FILE}.old"
            bsdtar --exclude=*${DBEXT//\.db/} -c${TAR_OPT}f "${pkgdir}/${FILES_DB_FILE}" *
        fi
    done
done

cd - >/dev/null
rm -rf "$TMPDIR" "$CACHEDIR" "$DBDIR"
rm -f "$lock" || exit 1
# echo 'done'

# vim: set ts=4 sw=4 et ft=sh:
